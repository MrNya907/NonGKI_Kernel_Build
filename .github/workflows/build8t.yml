name: Build Kernel OnePlus 8T (AOSP A15 with KSU & SUSFS)

on:
  workflow_dispatch:

env:
  PACK_METHOD: "MKBOOTIMG"
  KERNELSU_METHOD: "shell"
  PATCHES_SOURCE: "JackA1ltman/NonGKI_Kernel_Patches"
  PATCHES_BRANCH: "op_kernel"
  HOOK_METHOD: "normal"
  HOOK_OLDER: "false"
  PROFILE_NAME: "kebab_aosp_a15.env"
  KERNELSU_SUS_PATCH: "false"

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Load Configuration
        run: |
          CONFIG_ENV=$(grep -w "CONFIG_ENV" Profiles/${PROFILE_NAME} | cut -d "=" -f 2)
          CONFIG_LIST=(
              DEVICE_NAME DEVICE_CODENAME CUSTOM_CMDS EXTRA_CMDS
              KERNEL_SOURCE KERNEL_BRANCH CLANG_SOURCE CLANG_BRANCH
              GCC_GNU GCC_64_SOURCE GCC_64_BRANCH
              GCC_32_SOURCE GCC_32_BRANCH DEFCONFIG_SOURCE DEFCONFIG_NAME
              KERNELSU_SOURCE KERNELSU_BRANCH KERNELSU_NAME
              SUSFS_ENABLE SUSFS_FIXED AK3_SOURCE AK3_BRANCH
              BOOT_SOURCE LXC_ENABLE HAVE_NO_DTBO ROM_TEXT
          )

          for CONFIG in "${CONFIG_LIST[@]}"; do
              if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | cut -d ":" -f 2)" >> $GITHUB_ENV
              else
                  echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | cut -d "=" -f 2)" >> $GITHUB_ENV
              fi
          done

          mv $GITHUB_WORKSPACE/Patches /tmp/

      - name: Free Disk Space (LXC)
        if: env.LXC_ENABLE == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: false
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Maximize Build Space
        if: env.LXC_ENABLE != 'true'
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 20480
          temp-reserve-mb: 4096
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "false"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install GNU GCC
        if: env.GCC_GNU == 'true'
        run: |
          if [ -z "$GCC_64_SOURCE" ] && [ -z "$GCC_32_SOURCE" ]; then
            sudo apt-get install -y binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi
            echo "GCC_64=CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
            echo "GCC_32=CROSS_COMPILE_ARM32=arm-linux-gnueabi-" >> $GITHUB_ENV
          else
            echo "Using custom GCC toolchains."
          fi

      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev \
              g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush \
              schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils \
              minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev \
              lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3 p7zip p7zip-full

      - name: Set Pack Method, KernelSU and SUSFS
        run: |
          SUSFS_SOURCE="https://gitlab.com/simonpunk/susfs4ksu.git"
          SUSFS_BRANCH="kernel-${KERNEL_VERSION}"

          echo "PACK_METHOD is $PACK_METHOD"

          if [[ "$PACK_METHOD" == "Anykernel3" ]]; then
            cd "$GITHUB_WORKSPACE/device_kernel"
            if [[ -d "Anykernel3" ]]; then
              echo "Found Anykernel3 in Kernel!"
            else
              git clone "$AK3_SOURCE" -b "$AK3_BRANCH" Anykernel3 --depth=1
            fi
          elif [[ "$PACK_METHOD" == "MKBOOTIMG" ]]; then
              cd "$GITHUB_WORKSPACE"
              echo "Using MKBOOTIMG method, skipping external boot.img download"
              git clone https://android.googlesource.com/platform/system/tools/mkbootimg "$GITHUB_WORKSPACE/mkboottools" -b main-kernel-build-2024 --depth=1
              cd device_kernel
          else
            echo "Unknown PACK_METHOD: $PACK_METHOD"
            exit 1
          fi

          echo "PACK_METHOD=$PACK_METHOD" >> $GITHUB_ENV
        env:
          PACK_METHOD: ${{ env.PACK_METHOD }}
          KERNEL_VERSION: ${{ env.KERNEL_VERSION }}
          AK3_SOURCE: ${{ env.AK3_SOURCE }}
          AK3_BRANCH: ${{ env.AK3_BRANCH }}
          BOOT_SOURCE: ${{ env.BOOT_SOURCE }}
          DEVICE_NAME: ${{ env.DEVICE_NAME }}